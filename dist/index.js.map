{"version":3,"sources":["../node_modules/.pnpm/tsup@8.0.1_typescript@5.3.3/node_modules/tsup/assets/cjs_shims.js","../index.ts"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","#!/usr/bin/env node\r\n\r\nimport path from \"node:path\";\r\nimport {fileURLToPath} from \"node:url\";\r\nimport {cp, readFile, writeFile} from \"node:fs/promises\";\r\nimport {glob} from \"glob\";\r\nimport color from \"picocolors\";\r\nimport prompts from \"prompts\";\r\nimport yargs from \"yargs\";\r\nimport {hideBin} from \"yargs/helpers\";\r\n\r\n// List of templates\r\nconst TEMPLATES = [\r\n  {\r\n    title: \"Next.js + ESLint + TypeScript + Shadcn/ui\",\r\n    value: \"next-eslint-ts-shadcn\",\r\n  },\r\n  {\r\n    title: \"Next.js + ESLint + TypeScript + Tailwind\",\r\n    value: \"next-eslint-ts-tw\",\r\n  },\r\n  {\r\n    title: \"React (vite) + ESLint + TypeScript + Tailwind\",\r\n    value: \"react-eslint-ts-tw\",\r\n  },\r\n];\r\n\r\n// List of extras\r\nconst EXTRAS = {\r\n  \"next-eslint-ts-shadcn\": [\r\n    {\r\n      title: \"Mercado Pago\",\r\n      value: \"mercadopago\",\r\n    },\r\n    {\r\n      title: \"Clerk Auth\",\r\n      value: \"clerk\",\r\n    },\r\n    {\r\n      title: \"Auth0\",\r\n      value: \"auth0\",\r\n    },\r\n    {\r\n      title: \"Supabase\",\r\n      value: \"supabase\",\r\n    },\r\n    {\r\n      title: \"libSQL + Drizzle\",\r\n      value: \"libsql\",\r\n    },\r\n  ],\r\n  \"next-eslint-ts-tw\": [\r\n    {\r\n      title: \"Mercado Pago\",\r\n      value: \"mercadopago\",\r\n    },\r\n    {\r\n      title: \"Clerk Auth\",\r\n      value: \"clerk\",\r\n    },\r\n    {\r\n      title: \"Auth0\",\r\n      value: \"auth0\",\r\n    },\r\n    {\r\n      title: \"Supabase\",\r\n      value: \"supabase\",\r\n    },\r\n    {\r\n      title: \"libSQL + Drizzle\",\r\n      value: \"libsql\",\r\n    },\r\n  ],\r\n};\r\n\r\n// Specify CLI arguments\r\nconst args = yargs(hideBin(process.argv)).options({\r\n  name: {\r\n    alias: \"n\",\r\n    type: \"string\",\r\n    description: \"Name of the project\",\r\n  },\r\n  template: {\r\n    alias: \"t\",\r\n    type: \"string\",\r\n    description: \"Template to use\",\r\n  },\r\n});\r\n\r\n// Orverride arguments passed on the CLI\r\nprompts.override(args.argv);\r\n\r\nasync function main() {\r\n  // Get the initial values for the prompts\r\n  const {\r\n    _: [initialName, initialProject],\r\n  } = await args.argv;\r\n\r\n  // Create the project prompt\r\n  const project = await prompts(\r\n    [\r\n      {\r\n        type: \"text\",\r\n        name: \"name\",\r\n        message: \"What is the name of your project?\",\r\n        initial: initialName || \"appncy-project\",\r\n        validate: (value) => {\r\n          if (value.match(/[^a-zA-Z0-9-_]+/g))\r\n            return \"Project name can only contain letters, numbers, dashes and underscores\";\r\n\r\n          return true;\r\n        },\r\n      },\r\n      {\r\n        type: \"select\",\r\n        name: \"template\",\r\n        message: `Which template would you like to use?`,\r\n        initial: initialProject || 0,\r\n        choices: TEMPLATES,\r\n      },\r\n    ],\r\n    {\r\n      onCancel: () => {\r\n        console.log(\"\\nBye ðŸ‘‹\\n\");\r\n\r\n        process.exit(0);\r\n      },\r\n    },\r\n  );\r\n\r\n  // Get the template folder for the selected template\r\n  const template = path.join(\r\n    path.dirname(fileURLToPath(import.meta.url)),\r\n    \"templates\",\r\n    project.template,\r\n  );\r\n\r\n  // Get the destination folder for the project\r\n  const destination = path.join(process.cwd(), project.name);\r\n\r\n  // Get the extras for the selected template\r\n  let extras: string[] = [];\r\n\r\n  if (EXTRAS[project.template]) {\r\n    const {extras: results} = await prompts({\r\n      type: \"multiselect\",\r\n      name: \"extras\",\r\n      message: \"Which extras would you like to add?\",\r\n      instructions: false,\r\n      choices: EXTRAS[project.template],\r\n    });\r\n\r\n    // Assign to variable\r\n    extras = results;\r\n  }\r\n\r\n  // Copy files from the template folder to the current directory\r\n  await cp(path.join(template, \"project\"), destination, {recursive: true});\r\n\r\n  for await (const extra of extras) {\r\n    // Copy files from the extra folder to the current directory\r\n    await cp(path.join(template, \"extras\", extra), destination, {recursive: true});\r\n  }\r\n\r\n  // Get all files from the destination folder\r\n  const files = await glob(`**/*`, {nodir: true, cwd: destination, absolute: true});\r\n\r\n  // Read each file and replace the tokens\r\n  for await (const file of files) {\r\n    const data = await readFile(file, \"utf8\");\r\n    const draft = data.replace(/{{name}}/g, project.name);\r\n\r\n    await writeFile(file, draft, \"utf8\");\r\n  }\r\n\r\n  // Log outro message\r\n  console.log(\"\\nâœ¨ Project created âœ¨\");\r\n  console.log(`\\n${color.yellow(`Next steps:`)}\\n`);\r\n  console.log(`${color.green(`cd`)} ${project.name}`);\r\n  console.log(`${color.green(`pnpm`)} install`);\r\n  console.log(`${color.green(`pnpm`)} dev`);\r\n\r\n  // Extras log\r\n  if (extras.length) {\r\n    console.log(\r\n      `\\nCheck out the ${color.italic(\"README.md\")} file inside ${color.green(\r\n        extras.join(\", \"),\r\n      )} for more info on how to use it.`,\r\n    );\r\n  }\r\n\r\n  // Contact logs\r\n  console.log(\"\\n---\\n\");\r\n  console.log(`Questions ðŸ‘€? ${color.underline(color.cyan(\"https://x.com/goncy\"))}`);\r\n}\r\n\r\n// Run the main function\r\nmain().catch(console.error);\r\n"],"mappings":"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","names":["yargs","prompts","path","color"]}